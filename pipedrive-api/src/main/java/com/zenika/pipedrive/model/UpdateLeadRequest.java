/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zenika.pipedrive.model.UpdateLeadRequestValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateLeadRequest
 */
@JsonPropertyOrder({
  UpdateLeadRequest.JSON_PROPERTY_TITLE,
  UpdateLeadRequest.JSON_PROPERTY_OWNER_ID,
  UpdateLeadRequest.JSON_PROPERTY_LABEL_IDS,
  UpdateLeadRequest.JSON_PROPERTY_PERSON_ID,
  UpdateLeadRequest.JSON_PROPERTY_ORGANIZATION_ID,
  UpdateLeadRequest.JSON_PROPERTY_IS_ARCHIVED,
  UpdateLeadRequest.JSON_PROPERTY_VALUE,
  UpdateLeadRequest.JSON_PROPERTY_EXPECTED_CLOSE_DATE,
  UpdateLeadRequest.JSON_PROPERTY_VISIBLE_TO,
  UpdateLeadRequest.JSON_PROPERTY_WAS_SEEN
})
@JsonTypeName("updateLeadRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class UpdateLeadRequest {
  public static final String JSON_PROPERTY_TITLE = "title";
  private JsonNullable<String> title = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_OWNER_ID = "owner_id";
  private Integer ownerId;

  public static final String JSON_PROPERTY_LABEL_IDS = "label_ids";
  private List<UUID> labelIds = null;

  public static final String JSON_PROPERTY_PERSON_ID = "person_id";
  private JsonNullable<Integer> personId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_ORGANIZATION_ID = "organization_id";
  private JsonNullable<Integer> organizationId = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_IS_ARCHIVED = "is_archived";
  private Boolean isArchived;

  public static final String JSON_PROPERTY_VALUE = "value";
  private JsonNullable<UpdateLeadRequestValue> value = JsonNullable.<UpdateLeadRequestValue>undefined();

  public static final String JSON_PROPERTY_EXPECTED_CLOSE_DATE = "expected_close_date";
  private JsonNullable<LocalDate> expectedCloseDate = JsonNullable.<LocalDate>undefined();

  /**
   * Gets or Sets visibleTo
   */
  public enum VisibleToEnum {
    _1("1"),
    
    _3("3"),
    
    _5("5"),
    
    _7("7");

    private String value;

    VisibleToEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibleToEnum fromValue(String value) {
      for (VisibleToEnum b : VisibleToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBLE_TO = "visible_to";
  private VisibleToEnum visibleTo;

  /**
   * A flag indicating whether the lead was seen by someone in the Pipedrive UI
   */
  public enum WasSeenEnum {
    TRUE(true),
    
    FALSE(false);

    private Boolean value;

    WasSeenEnum(Boolean value) {
      this.value = value;
    }

    @JsonValue
    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WasSeenEnum fromValue(Boolean value) {
      for (WasSeenEnum b : WasSeenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WAS_SEEN = "was_seen";
  private WasSeenEnum wasSeen;

  public UpdateLeadRequest() {
  }

  public UpdateLeadRequest title(String title) {
    this.title = JsonNullable.<String>of(title);
    
    return this;
  }

   /**
   * The name of the lead
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the lead")
  @JsonIgnore

  public String getTitle() {
        return title.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTitle_JsonNullable() {
    return title;
  }
  
  @JsonProperty(JSON_PROPERTY_TITLE)
  public void setTitle_JsonNullable(JsonNullable<String> title) {
    this.title = title;
  }

  public void setTitle(String title) {
    this.title = JsonNullable.<String>of(title);
  }


  public UpdateLeadRequest ownerId(Integer ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.")
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOwnerId() {
    return ownerId;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerId(Integer ownerId) {
    this.ownerId = ownerId;
  }


  public UpdateLeadRequest labelIds(List<UUID> labelIds) {
    
    this.labelIds = labelIds;
    return this;
  }

  public UpdateLeadRequest addLabelIdsItem(UUID labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

   /**
   * The IDs of the lead labels which will be associated with the lead
   * @return labelIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IDs of the lead labels which will be associated with the lead")
  @JsonProperty(JSON_PROPERTY_LABEL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UUID> getLabelIds() {
    return labelIds;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabelIds(List<UUID> labelIds) {
    this.labelIds = labelIds;
  }


  public UpdateLeadRequest personId(Integer personId) {
    this.personId = JsonNullable.<Integer>of(personId);
    
    return this;
  }

   /**
   * The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both. 
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both. ")
  @JsonIgnore

  public Integer getPersonId() {
        return personId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERSON_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getPersonId_JsonNullable() {
    return personId;
  }
  
  @JsonProperty(JSON_PROPERTY_PERSON_ID)
  public void setPersonId_JsonNullable(JsonNullable<Integer> personId) {
    this.personId = personId;
  }

  public void setPersonId(Integer personId) {
    this.personId = JsonNullable.<Integer>of(personId);
  }


  public UpdateLeadRequest organizationId(Integer organizationId) {
    this.organizationId = JsonNullable.<Integer>of(organizationId);
    
    return this;
  }

   /**
   * The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.
   * @return organizationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.")
  @JsonIgnore

  public Integer getOrganizationId() {
        return organizationId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getOrganizationId_JsonNullable() {
    return organizationId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  public void setOrganizationId_JsonNullable(JsonNullable<Integer> organizationId) {
    this.organizationId = organizationId;
  }

  public void setOrganizationId(Integer organizationId) {
    this.organizationId = JsonNullable.<Integer>of(organizationId);
  }


  public UpdateLeadRequest isArchived(Boolean isArchived) {
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * A flag indicating whether the lead is archived or not
   * @return isArchived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag indicating whether the lead is archived or not")
  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsArchived() {
    return isArchived;
  }


  @JsonProperty(JSON_PROPERTY_IS_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public UpdateLeadRequest value(UpdateLeadRequestValue value) {
    this.value = JsonNullable.<UpdateLeadRequestValue>of(value);
    
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public UpdateLeadRequestValue getValue() {
        return value.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UpdateLeadRequestValue> getValue_JsonNullable() {
    return value;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUE)
  public void setValue_JsonNullable(JsonNullable<UpdateLeadRequestValue> value) {
    this.value = value;
  }

  public void setValue(UpdateLeadRequestValue value) {
    this.value = JsonNullable.<UpdateLeadRequestValue>of(value);
  }


  public UpdateLeadRequest expectedCloseDate(LocalDate expectedCloseDate) {
    this.expectedCloseDate = JsonNullable.<LocalDate>of(expectedCloseDate);
    
    return this;
  }

   /**
   * The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
   * @return expectedCloseDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.")
  @JsonIgnore

  public LocalDate getExpectedCloseDate() {
        return expectedCloseDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPECTED_CLOSE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LocalDate> getExpectedCloseDate_JsonNullable() {
    return expectedCloseDate;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPECTED_CLOSE_DATE)
  public void setExpectedCloseDate_JsonNullable(JsonNullable<LocalDate> expectedCloseDate) {
    this.expectedCloseDate = expectedCloseDate;
  }

  public void setExpectedCloseDate(LocalDate expectedCloseDate) {
    this.expectedCloseDate = JsonNullable.<LocalDate>of(expectedCloseDate);
  }


  public UpdateLeadRequest visibleTo(VisibleToEnum visibleTo) {
    
    this.visibleTo = visibleTo;
    return this;
  }

   /**
   * Get visibleTo
   * @return visibleTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibleToEnum getVisibleTo() {
    return visibleTo;
  }


  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibleTo(VisibleToEnum visibleTo) {
    this.visibleTo = visibleTo;
  }


  public UpdateLeadRequest wasSeen(WasSeenEnum wasSeen) {
    
    this.wasSeen = wasSeen;
    return this;
  }

   /**
   * A flag indicating whether the lead was seen by someone in the Pipedrive UI
   * @return wasSeen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag indicating whether the lead was seen by someone in the Pipedrive UI")
  @JsonProperty(JSON_PROPERTY_WAS_SEEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WasSeenEnum getWasSeen() {
    return wasSeen;
  }


  @JsonProperty(JSON_PROPERTY_WAS_SEEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWasSeen(WasSeenEnum wasSeen) {
    this.wasSeen = wasSeen;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLeadRequest updateLeadRequest = (UpdateLeadRequest) o;
    return equalsNullable(this.title, updateLeadRequest.title) &&
        Objects.equals(this.ownerId, updateLeadRequest.ownerId) &&
        Objects.equals(this.labelIds, updateLeadRequest.labelIds) &&
        equalsNullable(this.personId, updateLeadRequest.personId) &&
        equalsNullable(this.organizationId, updateLeadRequest.organizationId) &&
        Objects.equals(this.isArchived, updateLeadRequest.isArchived) &&
        equalsNullable(this.value, updateLeadRequest.value) &&
        equalsNullable(this.expectedCloseDate, updateLeadRequest.expectedCloseDate) &&
        Objects.equals(this.visibleTo, updateLeadRequest.visibleTo) &&
        Objects.equals(this.wasSeen, updateLeadRequest.wasSeen);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(title), ownerId, labelIds, hashCodeNullable(personId), hashCodeNullable(organizationId), isArchived, hashCodeNullable(value), hashCodeNullable(expectedCloseDate), visibleTo, wasSeen);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLeadRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    expectedCloseDate: ").append(toIndentedString(expectedCloseDate)).append("\n");
    sb.append("    visibleTo: ").append(toIndentedString(visibleTo)).append("\n");
    sb.append("    wasSeen: ").append(toIndentedString(wasSeen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

