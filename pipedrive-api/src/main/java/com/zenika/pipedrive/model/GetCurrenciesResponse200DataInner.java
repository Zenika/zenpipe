/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetCurrenciesResponse200DataInner
 */
@JsonPropertyOrder({
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_ID,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_CODE,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_NAME,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_DECIMAL_POINTS,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_SYMBOL,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_ACTIVE_FLAG,
  GetCurrenciesResponse200DataInner.JSON_PROPERTY_IS_CUSTOM_FLAG
})
@JsonTypeName("getCurrenciesResponse200_data_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class GetCurrenciesResponse200DataInner {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DECIMAL_POINTS = "decimal_points";
  private Integer decimalPoints;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_ACTIVE_FLAG = "active_flag";
  private Boolean activeFlag;

  public static final String JSON_PROPERTY_IS_CUSTOM_FLAG = "is_custom_flag";
  private Boolean isCustomFlag;

  public GetCurrenciesResponse200DataInner() {
  }

  public GetCurrenciesResponse200DataInner id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the currency
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the currency")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public GetCurrenciesResponse200DataInner code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the currency
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The code of the currency")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public GetCurrenciesResponse200DataInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the currency
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the currency")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public GetCurrenciesResponse200DataInner decimalPoints(Integer decimalPoints) {
    
    this.decimalPoints = decimalPoints;
    return this;
  }

   /**
   * The amount of decimal points of the currency
   * @return decimalPoints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of decimal points of the currency")
  @JsonProperty(JSON_PROPERTY_DECIMAL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDecimalPoints() {
    return decimalPoints;
  }


  @JsonProperty(JSON_PROPERTY_DECIMAL_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecimalPoints(Integer decimalPoints) {
    this.decimalPoints = decimalPoints;
  }


  public GetCurrenciesResponse200DataInner symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The symbol of the currency
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The symbol of the currency")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public GetCurrenciesResponse200DataInner activeFlag(Boolean activeFlag) {
    
    this.activeFlag = activeFlag;
    return this;
  }

   /**
   * Whether the currency is active or not
   * @return activeFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the currency is active or not")
  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActiveFlag() {
    return activeFlag;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveFlag(Boolean activeFlag) {
    this.activeFlag = activeFlag;
  }


  public GetCurrenciesResponse200DataInner isCustomFlag(Boolean isCustomFlag) {
    
    this.isCustomFlag = isCustomFlag;
    return this;
  }

   /**
   * Whether the currency is a custom one or not
   * @return isCustomFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the currency is a custom one or not")
  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCustomFlag() {
    return isCustomFlag;
  }


  @JsonProperty(JSON_PROPERTY_IS_CUSTOM_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCustomFlag(Boolean isCustomFlag) {
    this.isCustomFlag = isCustomFlag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCurrenciesResponse200DataInner getCurrenciesResponse200DataInner = (GetCurrenciesResponse200DataInner) o;
    return Objects.equals(this.id, getCurrenciesResponse200DataInner.id) &&
        Objects.equals(this.code, getCurrenciesResponse200DataInner.code) &&
        Objects.equals(this.name, getCurrenciesResponse200DataInner.name) &&
        Objects.equals(this.decimalPoints, getCurrenciesResponse200DataInner.decimalPoints) &&
        Objects.equals(this.symbol, getCurrenciesResponse200DataInner.symbol) &&
        Objects.equals(this.activeFlag, getCurrenciesResponse200DataInner.activeFlag) &&
        Objects.equals(this.isCustomFlag, getCurrenciesResponse200DataInner.isCustomFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, name, decimalPoints, symbol, activeFlag, isCustomFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCurrenciesResponse200DataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    decimalPoints: ").append(toIndentedString(decimalPoints)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
    sb.append("    isCustomFlag: ").append(toIndentedString(isCustomFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

