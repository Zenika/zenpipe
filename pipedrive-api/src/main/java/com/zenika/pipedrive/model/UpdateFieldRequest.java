/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateFieldRequest
 */
@JsonPropertyOrder({
  UpdateFieldRequest.JSON_PROPERTY_NAME,
  UpdateFieldRequest.JSON_PROPERTY_OPTIONS,
  UpdateFieldRequest.JSON_PROPERTY_ADD_VISIBLE_FLAG
})
@JsonTypeName("updateFieldRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class UpdateFieldRequest {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private String options;

  /**
   * Whether the field is available in &#39;add new&#39; modal or not (both in web and mobile app)
   */
  public enum AddVisibleFlagEnum {
    TRUE(true),
    
    FALSE(false);

    private Boolean value;

    AddVisibleFlagEnum(Boolean value) {
      this.value = value;
    }

    @JsonValue
    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AddVisibleFlagEnum fromValue(Boolean value) {
      for (AddVisibleFlagEnum b : AddVisibleFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ADD_VISIBLE_FLAG = "add_visible_flag";
  private AddVisibleFlagEnum addVisibleFlag = AddVisibleFlagEnum.TRUE;

  public UpdateFieldRequest() {
  }

  public UpdateFieldRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the field
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the field")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public UpdateFieldRequest options(String options) {
    
    this.options = options;
    return this;
  }

   /**
   * When &#x60;field_type&#x60; is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: &#x60;[{\&quot;id\&quot;:123,\&quot;label\&quot;:\&quot;Existing Item\&quot;},{\&quot;label\&quot;:\&quot;New Item\&quot;}]&#x60;
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{\"id\":123,\"label\":\"Existing Item\"},{\"label\":\"New Item\"}]`")
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(String options) {
    this.options = options;
  }


  public UpdateFieldRequest addVisibleFlag(AddVisibleFlagEnum addVisibleFlag) {
    
    this.addVisibleFlag = addVisibleFlag;
    return this;
  }

   /**
   * Whether the field is available in &#39;add new&#39; modal or not (both in web and mobile app)
   * @return addVisibleFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the field is available in 'add new' modal or not (both in web and mobile app)")
  @JsonProperty(JSON_PROPERTY_ADD_VISIBLE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AddVisibleFlagEnum getAddVisibleFlag() {
    return addVisibleFlag;
  }


  @JsonProperty(JSON_PROPERTY_ADD_VISIBLE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddVisibleFlag(AddVisibleFlagEnum addVisibleFlag) {
    this.addVisibleFlag = addVisibleFlag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFieldRequest updateFieldRequest = (UpdateFieldRequest) o;
    return Objects.equals(this.name, updateFieldRequest.name) &&
        Objects.equals(this.options, updateFieldRequest.options) &&
        Objects.equals(this.addVisibleFlag, updateFieldRequest.addVisibleFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, options, addVisibleFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFieldRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    addVisibleFlag: ").append(toIndentedString(addVisibleFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

