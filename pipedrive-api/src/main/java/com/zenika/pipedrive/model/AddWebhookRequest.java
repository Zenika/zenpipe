/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AddWebhookRequest
 */
@JsonPropertyOrder({
  AddWebhookRequest.JSON_PROPERTY_SUBSCRIPTION_URL,
  AddWebhookRequest.JSON_PROPERTY_EVENT_ACTION,
  AddWebhookRequest.JSON_PROPERTY_EVENT_OBJECT,
  AddWebhookRequest.JSON_PROPERTY_USER_ID,
  AddWebhookRequest.JSON_PROPERTY_HTTP_AUTH_USER,
  AddWebhookRequest.JSON_PROPERTY_HTTP_AUTH_PASSWORD
})
@JsonTypeName("addWebhookRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class AddWebhookRequest {
  public static final String JSON_PROPERTY_SUBSCRIPTION_URL = "subscription_url";
  private String subscriptionUrl;

  /**
   * The type of action to receive notifications about. Wildcard will match all supported actions.
   */
  public enum EventActionEnum {
    ADDED("added"),
    
    UPDATED("updated"),
    
    MERGED("merged"),
    
    DELETED("deleted"),
    
    STAR("*");

    private String value;

    EventActionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventActionEnum fromValue(String value) {
      for (EventActionEnum b : EventActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_ACTION = "event_action";
  private EventActionEnum eventAction;

  /**
   * The type of object to receive notifications about. Wildcard will match all supported objects.
   */
  public enum EventObjectEnum {
    ACTIVITY("activity"),
    
    ACTIVITYTYPE("activityType"),
    
    DEAL("deal"),
    
    NOTE("note"),
    
    ORGANIZATION("organization"),
    
    PERSON("person"),
    
    PIPELINE("pipeline"),
    
    PRODUCT("product"),
    
    STAGE("stage"),
    
    USER("user"),
    
    STAR("*");

    private String value;

    EventObjectEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventObjectEnum fromValue(String value) {
      for (EventObjectEnum b : EventObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_OBJECT = "event_object";
  private EventObjectEnum eventObject;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Integer userId;

  public static final String JSON_PROPERTY_HTTP_AUTH_USER = "http_auth_user";
  private String httpAuthUser;

  public static final String JSON_PROPERTY_HTTP_AUTH_PASSWORD = "http_auth_password";
  private String httpAuthPassword;

  public AddWebhookRequest() {
  }

  public AddWebhookRequest subscriptionUrl(String subscriptionUrl) {
    
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

   /**
   * A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the &#x60;subscription_url&#x60; and the chosen URL must not redirect to another link.
   * @return subscriptionUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubscriptionUrl() {
    return subscriptionUrl;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscriptionUrl(String subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public AddWebhookRequest eventAction(EventActionEnum eventAction) {
    
    this.eventAction = eventAction;
    return this;
  }

   /**
   * The type of action to receive notifications about. Wildcard will match all supported actions.
   * @return eventAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of action to receive notifications about. Wildcard will match all supported actions.")
  @JsonProperty(JSON_PROPERTY_EVENT_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventActionEnum getEventAction() {
    return eventAction;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventAction(EventActionEnum eventAction) {
    this.eventAction = eventAction;
  }


  public AddWebhookRequest eventObject(EventObjectEnum eventObject) {
    
    this.eventObject = eventObject;
    return this;
  }

   /**
   * The type of object to receive notifications about. Wildcard will match all supported objects.
   * @return eventObject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of object to receive notifications about. Wildcard will match all supported objects.")
  @JsonProperty(JSON_PROPERTY_EVENT_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventObjectEnum getEventObject() {
    return eventObject;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventObject(EventObjectEnum eventObject) {
    this.eventObject = eventObject;
  }


  public AddWebhookRequest userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The ID of the user that this webhook will be authorized with. You have the option to use a different user&#39;s &#x60;user_id&#x60;. If it is not set, the current user&#39;s &#x60;user_id&#x60; will be used. As each webhook event is checked against a user’s permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin user’s &#x60;user_id&#x60;.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the user that this webhook will be authorized with. You have the option to use a different user's `user_id`. If it is not set, the current user's `user_id` will be used. As each webhook event is checked against a user’s permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin user’s `user_id`.")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public AddWebhookRequest httpAuthUser(String httpAuthUser) {
    
    this.httpAuthUser = httpAuthUser;
    return this;
  }

   /**
   * The HTTP basic auth username of the subscription URL endpoint (if required)
   * @return httpAuthUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The HTTP basic auth username of the subscription URL endpoint (if required)")
  @JsonProperty(JSON_PROPERTY_HTTP_AUTH_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpAuthUser() {
    return httpAuthUser;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_AUTH_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpAuthUser(String httpAuthUser) {
    this.httpAuthUser = httpAuthUser;
  }


  public AddWebhookRequest httpAuthPassword(String httpAuthPassword) {
    
    this.httpAuthPassword = httpAuthPassword;
    return this;
  }

   /**
   * The HTTP basic auth password of the subscription URL endpoint (if required)
   * @return httpAuthPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The HTTP basic auth password of the subscription URL endpoint (if required)")
  @JsonProperty(JSON_PROPERTY_HTTP_AUTH_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpAuthPassword() {
    return httpAuthPassword;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_AUTH_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpAuthPassword(String httpAuthPassword) {
    this.httpAuthPassword = httpAuthPassword;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddWebhookRequest addWebhookRequest = (AddWebhookRequest) o;
    return Objects.equals(this.subscriptionUrl, addWebhookRequest.subscriptionUrl) &&
        Objects.equals(this.eventAction, addWebhookRequest.eventAction) &&
        Objects.equals(this.eventObject, addWebhookRequest.eventObject) &&
        Objects.equals(this.userId, addWebhookRequest.userId) &&
        Objects.equals(this.httpAuthUser, addWebhookRequest.httpAuthUser) &&
        Objects.equals(this.httpAuthPassword, addWebhookRequest.httpAuthPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriptionUrl, eventAction, eventObject, userId, httpAuthUser, httpAuthPassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddWebhookRequest {\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    eventAction: ").append(toIndentedString(eventAction)).append("\n");
    sb.append("    eventObject: ").append(toIndentedString(eventObject)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    httpAuthUser: ").append(toIndentedString(httpAuthUser)).append("\n");
    sb.append("    httpAuthPassword: ").append(toIndentedString(httpAuthPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

