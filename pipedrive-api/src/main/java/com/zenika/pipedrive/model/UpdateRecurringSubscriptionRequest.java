/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateRecurringSubscriptionRequest
 */
@JsonPropertyOrder({
  UpdateRecurringSubscriptionRequest.JSON_PROPERTY_DESCRIPTION,
  UpdateRecurringSubscriptionRequest.JSON_PROPERTY_CYCLE_AMOUNT,
  UpdateRecurringSubscriptionRequest.JSON_PROPERTY_PAYMENTS,
  UpdateRecurringSubscriptionRequest.JSON_PROPERTY_UPDATE_DEAL_VALUE,
  UpdateRecurringSubscriptionRequest.JSON_PROPERTY_EFFECTIVE_DATE
})
@JsonTypeName("updateRecurringSubscriptionRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class UpdateRecurringSubscriptionRequest {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CYCLE_AMOUNT = "cycle_amount";
  private Integer cycleAmount;

  public static final String JSON_PROPERTY_PAYMENTS = "payments";
  private List<Object> payments = null;

  public static final String JSON_PROPERTY_UPDATE_DEAL_VALUE = "update_deal_value";
  private Boolean updateDealValue;

  public static final String JSON_PROPERTY_EFFECTIVE_DATE = "effective_date";
  private LocalDate effectiveDate;

  public UpdateRecurringSubscriptionRequest() {
  }

  public UpdateRecurringSubscriptionRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the recurring subscription
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the recurring subscription")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateRecurringSubscriptionRequest cycleAmount(Integer cycleAmount) {
    
    this.cycleAmount = cycleAmount;
    return this;
  }

   /**
   * The amount of each payment
   * @return cycleAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of each payment")
  @JsonProperty(JSON_PROPERTY_CYCLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCycleAmount() {
    return cycleAmount;
  }


  @JsonProperty(JSON_PROPERTY_CYCLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCycleAmount(Integer cycleAmount) {
    this.cycleAmount = cycleAmount;
  }


  public UpdateRecurringSubscriptionRequest payments(List<Object> payments) {
    
    this.payments = payments;
    return this;
  }

  public UpdateRecurringSubscriptionRequest addPaymentsItem(Object paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).")
  @JsonProperty(JSON_PROPERTY_PAYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getPayments() {
    return payments;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayments(List<Object> payments) {
    this.payments = payments;
  }


  public UpdateRecurringSubscriptionRequest updateDealValue(Boolean updateDealValue) {
    
    this.updateDealValue = updateDealValue;
    return this;
  }

   /**
   * Indicates that the deal value must be set to recurring subscription&#39;s MRR value
   * @return updateDealValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates that the deal value must be set to recurring subscription's MRR value")
  @JsonProperty(JSON_PROPERTY_UPDATE_DEAL_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUpdateDealValue() {
    return updateDealValue;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_DEAL_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateDealValue(Boolean updateDealValue) {
    this.updateDealValue = updateDealValue;
  }


  public UpdateRecurringSubscriptionRequest effectiveDate(LocalDate effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * All payments after that date will be affected. Format: YYYY-MM-DD
   * @return effectiveDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "All payments after that date will be affected. Format: YYYY-MM-DD")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRecurringSubscriptionRequest updateRecurringSubscriptionRequest = (UpdateRecurringSubscriptionRequest) o;
    return Objects.equals(this.description, updateRecurringSubscriptionRequest.description) &&
        Objects.equals(this.cycleAmount, updateRecurringSubscriptionRequest.cycleAmount) &&
        Objects.equals(this.payments, updateRecurringSubscriptionRequest.payments) &&
        Objects.equals(this.updateDealValue, updateRecurringSubscriptionRequest.updateDealValue) &&
        Objects.equals(this.effectiveDate, updateRecurringSubscriptionRequest.effectiveDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, cycleAmount, payments, updateDealValue, effectiveDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRecurringSubscriptionRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cycleAmount: ").append(toIndentedString(cycleAmount)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    updateDealValue: ").append(toIndentedString(updateDealValue)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

