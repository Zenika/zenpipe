/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentResponse200AllOfDataInner
 */
@JsonPropertyOrder({
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_ID,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_SUBSCRIPTION_ID,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_DEAL_ID,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_IS_ACTIVE,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_AMOUNT,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_CURRENCY,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_CHANGE_AMOUNT,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_DUE_AT,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_REVENUE_MOVEMENT_TYPE,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_PAYMENT_TYPE,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_DESCRIPTION,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_ADD_TIME,
  PaymentResponse200AllOfDataInner.JSON_PROPERTY_UPDATE_TIME
})
@JsonTypeName("paymentResponse200_allOf_data_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class PaymentResponse200AllOfDataInner {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_SUBSCRIPTION_ID = "subscription_id";
  private Integer subscriptionId;

  public static final String JSON_PROPERTY_DEAL_ID = "deal_id";
  private Integer dealId;

  public static final String JSON_PROPERTY_IS_ACTIVE = "is_active";
  private Boolean isActive;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Double amount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_CHANGE_AMOUNT = "change_amount";
  private Double changeAmount;

  public static final String JSON_PROPERTY_DUE_AT = "due_at";
  private LocalDate dueAt;

  /**
   * Represents the movement of revenue in comparison with the previous payment. Possible values are: &#x60;New&#x60; - first payment of the subscription. &#x60;Recurring&#x60; - no movement. &#x60;Expansion&#x60; - current payment amount &gt; previous payment amount. &#x60;Contraction&#x60; - current payment amount &lt; previous payment amount. &#x60;Churn&#x60; - last payment of the subscription.
   */
  public enum RevenueMovementTypeEnum {
    NEW("new"),
    
    RECURRING("recurring"),
    
    EXPANSION("expansion"),
    
    CONTRACTION("contraction"),
    
    NONE("none"),
    
    CHURN("churn");

    private String value;

    RevenueMovementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RevenueMovementTypeEnum fromValue(String value) {
      for (RevenueMovementTypeEnum b : RevenueMovementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REVENUE_MOVEMENT_TYPE = "revenue_movement_type";
  private RevenueMovementTypeEnum revenueMovementType;

  /**
   * The type of the payment. Possible values are: &#x60;Recurring&#x60; - payments occur over fixed intervals of time, &#x60;Additional&#x60; - extra payment not the recurring payment of the recurring subscription, &#x60;Installment&#x60; - payment of the installment subscription.
   */
  public enum PaymentTypeEnum {
    RECURRING("recurring"),
    
    ADDITIONAL("additional"),
    
    INSTALLMENT("installment");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "payment_type";
  private PaymentTypeEnum paymentType;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ADD_TIME = "add_time";
  private String addTime;

  public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
  private String updateTime;

  public PaymentResponse200AllOfDataInner() {
  }

  public PaymentResponse200AllOfDataInner id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the payment
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the payment")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PaymentResponse200AllOfDataInner subscriptionId(Integer subscriptionId) {
    
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * The ID of the subscription this payment is associated with
   * @return subscriptionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the subscription this payment is associated with")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSubscriptionId() {
    return subscriptionId;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionId(Integer subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public PaymentResponse200AllOfDataInner dealId(Integer dealId) {
    
    this.dealId = dealId;
    return this;
  }

   /**
   * The ID of the deal this payment is associated with
   * @return dealId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the deal this payment is associated with")
  @JsonProperty(JSON_PROPERTY_DEAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDealId() {
    return dealId;
  }


  @JsonProperty(JSON_PROPERTY_DEAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDealId(Integer dealId) {
    this.dealId = dealId;
  }


  public PaymentResponse200AllOfDataInner isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * The payment status
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment status")
  @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsActive() {
    return isActive;
  }


  @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public PaymentResponse200AllOfDataInner amount(Double amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The payment amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment amount")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public PaymentResponse200AllOfDataInner currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the payment
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency of the payment")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaymentResponse200AllOfDataInner changeAmount(Double changeAmount) {
    
    this.changeAmount = changeAmount;
    return this;
  }

   /**
   * The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.
   * @return changeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.")
  @JsonProperty(JSON_PROPERTY_CHANGE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getChangeAmount() {
    return changeAmount;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeAmount(Double changeAmount) {
    this.changeAmount = changeAmount;
  }


  public PaymentResponse200AllOfDataInner dueAt(LocalDate dueAt) {
    
    this.dueAt = dueAt;
    return this;
  }

   /**
   * The date when payment occurs
   * @return dueAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when payment occurs")
  @JsonProperty(JSON_PROPERTY_DUE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDueAt() {
    return dueAt;
  }


  @JsonProperty(JSON_PROPERTY_DUE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDueAt(LocalDate dueAt) {
    this.dueAt = dueAt;
  }


  public PaymentResponse200AllOfDataInner revenueMovementType(RevenueMovementTypeEnum revenueMovementType) {
    
    this.revenueMovementType = revenueMovementType;
    return this;
  }

   /**
   * Represents the movement of revenue in comparison with the previous payment. Possible values are: &#x60;New&#x60; - first payment of the subscription. &#x60;Recurring&#x60; - no movement. &#x60;Expansion&#x60; - current payment amount &gt; previous payment amount. &#x60;Contraction&#x60; - current payment amount &lt; previous payment amount. &#x60;Churn&#x60; - last payment of the subscription.
   * @return revenueMovementType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.")
  @JsonProperty(JSON_PROPERTY_REVENUE_MOVEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RevenueMovementTypeEnum getRevenueMovementType() {
    return revenueMovementType;
  }


  @JsonProperty(JSON_PROPERTY_REVENUE_MOVEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevenueMovementType(RevenueMovementTypeEnum revenueMovementType) {
    this.revenueMovementType = revenueMovementType;
  }


  public PaymentResponse200AllOfDataInner paymentType(PaymentTypeEnum paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The type of the payment. Possible values are: &#x60;Recurring&#x60; - payments occur over fixed intervals of time, &#x60;Additional&#x60; - extra payment not the recurring payment of the recurring subscription, &#x60;Installment&#x60; - payment of the installment subscription.
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.")
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public PaymentResponse200AllOfDataInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the payment
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the payment")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentResponse200AllOfDataInner addTime(String addTime) {
    
    this.addTime = addTime;
    return this;
  }

   /**
   * The creation time of the payment
   * @return addTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The creation time of the payment")
  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddTime() {
    return addTime;
  }


  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddTime(String addTime) {
    this.addTime = addTime;
  }


  public PaymentResponse200AllOfDataInner updateTime(String updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The update time of the payment
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The update time of the payment")
  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdateTime() {
    return updateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentResponse200AllOfDataInner paymentResponse200AllOfDataInner = (PaymentResponse200AllOfDataInner) o;
    return Objects.equals(this.id, paymentResponse200AllOfDataInner.id) &&
        Objects.equals(this.subscriptionId, paymentResponse200AllOfDataInner.subscriptionId) &&
        Objects.equals(this.dealId, paymentResponse200AllOfDataInner.dealId) &&
        Objects.equals(this.isActive, paymentResponse200AllOfDataInner.isActive) &&
        Objects.equals(this.amount, paymentResponse200AllOfDataInner.amount) &&
        Objects.equals(this.currency, paymentResponse200AllOfDataInner.currency) &&
        Objects.equals(this.changeAmount, paymentResponse200AllOfDataInner.changeAmount) &&
        Objects.equals(this.dueAt, paymentResponse200AllOfDataInner.dueAt) &&
        Objects.equals(this.revenueMovementType, paymentResponse200AllOfDataInner.revenueMovementType) &&
        Objects.equals(this.paymentType, paymentResponse200AllOfDataInner.paymentType) &&
        Objects.equals(this.description, paymentResponse200AllOfDataInner.description) &&
        Objects.equals(this.addTime, paymentResponse200AllOfDataInner.addTime) &&
        Objects.equals(this.updateTime, paymentResponse200AllOfDataInner.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subscriptionId, dealId, isActive, amount, currency, changeAmount, dueAt, revenueMovementType, paymentType, description, addTime, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentResponse200AllOfDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    changeAmount: ").append(toIndentedString(changeAmount)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    revenueMovementType: ").append(toIndentedString(revenueMovementType)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addTime: ").append(toIndentedString(addTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

