/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zenika.pipedrive.model.MailMessageItemForListAllOfFromInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MailMessageItemForListAllOf
 */
@JsonPropertyOrder({
  MailMessageItemForListAllOf.JSON_PROPERTY_ID,
  MailMessageItemForListAllOf.JSON_PROPERTY_FROM,
  MailMessageItemForListAllOf.JSON_PROPERTY_TO,
  MailMessageItemForListAllOf.JSON_PROPERTY_CC,
  MailMessageItemForListAllOf.JSON_PROPERTY_BCC,
  MailMessageItemForListAllOf.JSON_PROPERTY_BODY_URL,
  MailMessageItemForListAllOf.JSON_PROPERTY_ACCOUNT_ID,
  MailMessageItemForListAllOf.JSON_PROPERTY_USER_ID,
  MailMessageItemForListAllOf.JSON_PROPERTY_MAIL_THREAD_ID,
  MailMessageItemForListAllOf.JSON_PROPERTY_SUBJECT,
  MailMessageItemForListAllOf.JSON_PROPERTY_SNIPPET,
  MailMessageItemForListAllOf.JSON_PROPERTY_MAIL_TRACKING_STATUS,
  MailMessageItemForListAllOf.JSON_PROPERTY_MAIL_LINK_TRACKING_ENABLED_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_READ_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_DRAFT,
  MailMessageItemForListAllOf.JSON_PROPERTY_DRAFT_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_SYNCED_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_DELETED_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_HAS_BODY_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_SENT_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_SENT_FROM_PIPEDRIVE_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_SMART_BCC_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_MESSAGE_TIME,
  MailMessageItemForListAllOf.JSON_PROPERTY_ADD_TIME,
  MailMessageItemForListAllOf.JSON_PROPERTY_UPDATE_TIME,
  MailMessageItemForListAllOf.JSON_PROPERTY_HAS_ATTACHMENTS_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_HAS_INLINE_ATTACHMENTS_FLAG,
  MailMessageItemForListAllOf.JSON_PROPERTY_HAS_REAL_ATTACHMENTS_FLAG
})
@JsonTypeName("mailMessageItemForList_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class MailMessageItemForListAllOf {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_FROM = "from";
  private List<MailMessageItemForListAllOfFromInner> from = null;

  public static final String JSON_PROPERTY_TO = "to";
  private List<MailMessageItemForListAllOfFromInner> to = null;

  public static final String JSON_PROPERTY_CC = "cc";
  private List<MailMessageItemForListAllOfFromInner> cc = null;

  public static final String JSON_PROPERTY_BCC = "bcc";
  private List<MailMessageItemForListAllOfFromInner> bcc = null;

  public static final String JSON_PROPERTY_BODY_URL = "body_url";
  private String bodyUrl;

  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private String accountId;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Integer userId;

  public static final String JSON_PROPERTY_MAIL_THREAD_ID = "mail_thread_id";
  private Integer mailThreadId;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_SNIPPET = "snippet";
  private String snippet;

  /**
   * The status of tracking mail message. Value is &#x60;null&#x60; if tracking is not enabled.
   */
  public enum MailTrackingStatusEnum {
    OPENED("opened"),
    
    NOT_OPENED("not opened");

    private String value;

    MailTrackingStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MailTrackingStatusEnum fromValue(String value) {
      for (MailTrackingStatusEnum b : MailTrackingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_MAIL_TRACKING_STATUS = "mail_tracking_status";
  private JsonNullable<MailTrackingStatusEnum> mailTrackingStatus = JsonNullable.<MailTrackingStatusEnum>undefined();

  /**
   * Gets or Sets mailLinkTrackingEnabledFlag
   */
  public enum MailLinkTrackingEnabledFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    MailLinkTrackingEnabledFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MailLinkTrackingEnabledFlagEnum fromValue(BigDecimal value) {
      for (MailLinkTrackingEnabledFlagEnum b : MailLinkTrackingEnabledFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MAIL_LINK_TRACKING_ENABLED_FLAG = "mail_link_tracking_enabled_flag";
  private MailLinkTrackingEnabledFlagEnum mailLinkTrackingEnabledFlag = MailLinkTrackingEnabledFlagEnum.NUMBER_0;

  /**
   * Gets or Sets readFlag
   */
  public enum ReadFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    ReadFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReadFlagEnum fromValue(BigDecimal value) {
      for (ReadFlagEnum b : ReadFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_READ_FLAG = "read_flag";
  private ReadFlagEnum readFlag = ReadFlagEnum.NUMBER_0;

  public static final String JSON_PROPERTY_DRAFT = "draft";
  private String draft;

  /**
   * Gets or Sets draftFlag
   */
  public enum DraftFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    DraftFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DraftFlagEnum fromValue(BigDecimal value) {
      for (DraftFlagEnum b : DraftFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DRAFT_FLAG = "draft_flag";
  private DraftFlagEnum draftFlag = DraftFlagEnum.NUMBER_0;

  /**
   * Gets or Sets syncedFlag
   */
  public enum SyncedFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    SyncedFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SyncedFlagEnum fromValue(BigDecimal value) {
      for (SyncedFlagEnum b : SyncedFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SYNCED_FLAG = "synced_flag";
  private SyncedFlagEnum syncedFlag = SyncedFlagEnum.NUMBER_0;

  /**
   * Gets or Sets deletedFlag
   */
  public enum DeletedFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    DeletedFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeletedFlagEnum fromValue(BigDecimal value) {
      for (DeletedFlagEnum b : DeletedFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DELETED_FLAG = "deleted_flag";
  private DeletedFlagEnum deletedFlag = DeletedFlagEnum.NUMBER_0;

  /**
   * Gets or Sets hasBodyFlag
   */
  public enum HasBodyFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    HasBodyFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasBodyFlagEnum fromValue(BigDecimal value) {
      for (HasBodyFlagEnum b : HasBodyFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_BODY_FLAG = "has_body_flag";
  private HasBodyFlagEnum hasBodyFlag = HasBodyFlagEnum.NUMBER_0;

  /**
   * Gets or Sets sentFlag
   */
  public enum SentFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    SentFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SentFlagEnum fromValue(BigDecimal value) {
      for (SentFlagEnum b : SentFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SENT_FLAG = "sent_flag";
  private SentFlagEnum sentFlag = SentFlagEnum.NUMBER_0;

  /**
   * Gets or Sets sentFromPipedriveFlag
   */
  public enum SentFromPipedriveFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    SentFromPipedriveFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SentFromPipedriveFlagEnum fromValue(BigDecimal value) {
      for (SentFromPipedriveFlagEnum b : SentFromPipedriveFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SENT_FROM_PIPEDRIVE_FLAG = "sent_from_pipedrive_flag";
  private SentFromPipedriveFlagEnum sentFromPipedriveFlag = SentFromPipedriveFlagEnum.NUMBER_0;

  /**
   * Gets or Sets smartBccFlag
   */
  public enum SmartBccFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    SmartBccFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SmartBccFlagEnum fromValue(BigDecimal value) {
      for (SmartBccFlagEnum b : SmartBccFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SMART_BCC_FLAG = "smart_bcc_flag";
  private SmartBccFlagEnum smartBccFlag = SmartBccFlagEnum.NUMBER_0;

  public static final String JSON_PROPERTY_MESSAGE_TIME = "message_time";
  private OffsetDateTime messageTime;

  public static final String JSON_PROPERTY_ADD_TIME = "add_time";
  private OffsetDateTime addTime;

  public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
  private OffsetDateTime updateTime;

  /**
   * Gets or Sets hasAttachmentsFlag
   */
  public enum HasAttachmentsFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    HasAttachmentsFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasAttachmentsFlagEnum fromValue(BigDecimal value) {
      for (HasAttachmentsFlagEnum b : HasAttachmentsFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_ATTACHMENTS_FLAG = "has_attachments_flag";
  private HasAttachmentsFlagEnum hasAttachmentsFlag = HasAttachmentsFlagEnum.NUMBER_0;

  /**
   * Gets or Sets hasInlineAttachmentsFlag
   */
  public enum HasInlineAttachmentsFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    HasInlineAttachmentsFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasInlineAttachmentsFlagEnum fromValue(BigDecimal value) {
      for (HasInlineAttachmentsFlagEnum b : HasInlineAttachmentsFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_INLINE_ATTACHMENTS_FLAG = "has_inline_attachments_flag";
  private HasInlineAttachmentsFlagEnum hasInlineAttachmentsFlag = HasInlineAttachmentsFlagEnum.NUMBER_0;

  /**
   * Gets or Sets hasRealAttachmentsFlag
   */
  public enum HasRealAttachmentsFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    HasRealAttachmentsFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HasRealAttachmentsFlagEnum fromValue(BigDecimal value) {
      for (HasRealAttachmentsFlagEnum b : HasRealAttachmentsFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HAS_REAL_ATTACHMENTS_FLAG = "has_real_attachments_flag";
  private HasRealAttachmentsFlagEnum hasRealAttachmentsFlag = HasRealAttachmentsFlagEnum.NUMBER_0;

  public MailMessageItemForListAllOf() {
  }

  public MailMessageItemForListAllOf id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the mail message.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the mail message.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public MailMessageItemForListAllOf from(List<MailMessageItemForListAllOfFromInner> from) {
    
    this.from = from;
    return this;
  }

  public MailMessageItemForListAllOf addFromItem(MailMessageItemForListAllOfFromInner fromItem) {
    if (this.from == null) {
      this.from = new ArrayList<>();
    }
    this.from.add(fromItem);
    return this;
  }

   /**
   * The array of mail message sender (object)
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array of mail message sender (object)")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailMessageItemForListAllOfFromInner> getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(List<MailMessageItemForListAllOfFromInner> from) {
    this.from = from;
  }


  public MailMessageItemForListAllOf to(List<MailMessageItemForListAllOfFromInner> to) {
    
    this.to = to;
    return this;
  }

  public MailMessageItemForListAllOf addToItem(MailMessageItemForListAllOfFromInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * The array of mail message receiver (object)
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array of mail message receiver (object)")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailMessageItemForListAllOfFromInner> getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(List<MailMessageItemForListAllOfFromInner> to) {
    this.to = to;
  }


  public MailMessageItemForListAllOf cc(List<MailMessageItemForListAllOfFromInner> cc) {
    
    this.cc = cc;
    return this;
  }

  public MailMessageItemForListAllOf addCcItem(MailMessageItemForListAllOfFromInner ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * The array of mail message copies (object)
   * @return cc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array of mail message copies (object)")
  @JsonProperty(JSON_PROPERTY_CC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailMessageItemForListAllOfFromInner> getCc() {
    return cc;
  }


  @JsonProperty(JSON_PROPERTY_CC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCc(List<MailMessageItemForListAllOfFromInner> cc) {
    this.cc = cc;
  }


  public MailMessageItemForListAllOf bcc(List<MailMessageItemForListAllOfFromInner> bcc) {
    
    this.bcc = bcc;
    return this;
  }

  public MailMessageItemForListAllOf addBccItem(MailMessageItemForListAllOfFromInner bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * The array of mail message blind copies (object)
   * @return bcc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array of mail message blind copies (object)")
  @JsonProperty(JSON_PROPERTY_BCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailMessageItemForListAllOfFromInner> getBcc() {
    return bcc;
  }


  @JsonProperty(JSON_PROPERTY_BCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBcc(List<MailMessageItemForListAllOfFromInner> bcc) {
    this.bcc = bcc;
  }


  public MailMessageItemForListAllOf bodyUrl(String bodyUrl) {
    
    this.bodyUrl = bodyUrl;
    return this;
  }

   /**
   * The mail message body URL
   * @return bodyUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mail message body URL")
  @JsonProperty(JSON_PROPERTY_BODY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBodyUrl() {
    return bodyUrl;
  }


  @JsonProperty(JSON_PROPERTY_BODY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBodyUrl(String bodyUrl) {
    this.bodyUrl = bodyUrl;
  }


  public MailMessageItemForListAllOf accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The connection account ID
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The connection account ID")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public MailMessageItemForListAllOf userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * ID of the user whom mail message will be assigned to
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the user whom mail message will be assigned to")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public MailMessageItemForListAllOf mailThreadId(Integer mailThreadId) {
    
    this.mailThreadId = mailThreadId;
    return this;
  }

   /**
   * ID of the mail message thread
   * @return mailThreadId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the mail message thread")
  @JsonProperty(JSON_PROPERTY_MAIL_THREAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMailThreadId() {
    return mailThreadId;
  }


  @JsonProperty(JSON_PROPERTY_MAIL_THREAD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMailThreadId(Integer mailThreadId) {
    this.mailThreadId = mailThreadId;
  }


  public MailMessageItemForListAllOf subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * The subject of mail message
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The subject of mail message")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MailMessageItemForListAllOf snippet(String snippet) {
    
    this.snippet = snippet;
    return this;
  }

   /**
   * The snippet of mail message. Snippet length is up to 225 characters.
   * @return snippet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The snippet of mail message. Snippet length is up to 225 characters.")
  @JsonProperty(JSON_PROPERTY_SNIPPET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSnippet() {
    return snippet;
  }


  @JsonProperty(JSON_PROPERTY_SNIPPET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public MailMessageItemForListAllOf mailTrackingStatus(MailTrackingStatusEnum mailTrackingStatus) {
    this.mailTrackingStatus = JsonNullable.<MailTrackingStatusEnum>of(mailTrackingStatus);
    
    return this;
  }

   /**
   * The status of tracking mail message. Value is &#x60;null&#x60; if tracking is not enabled.
   * @return mailTrackingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of tracking mail message. Value is `null` if tracking is not enabled.")
  @JsonIgnore

  public MailTrackingStatusEnum getMailTrackingStatus() {
        return mailTrackingStatus.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAIL_TRACKING_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MailTrackingStatusEnum> getMailTrackingStatus_JsonNullable() {
    return mailTrackingStatus;
  }
  
  @JsonProperty(JSON_PROPERTY_MAIL_TRACKING_STATUS)
  public void setMailTrackingStatus_JsonNullable(JsonNullable<MailTrackingStatusEnum> mailTrackingStatus) {
    this.mailTrackingStatus = mailTrackingStatus;
  }

  public void setMailTrackingStatus(MailTrackingStatusEnum mailTrackingStatus) {
    this.mailTrackingStatus = JsonNullable.<MailTrackingStatusEnum>of(mailTrackingStatus);
  }


  public MailMessageItemForListAllOf mailLinkTrackingEnabledFlag(MailLinkTrackingEnabledFlagEnum mailLinkTrackingEnabledFlag) {
    
    this.mailLinkTrackingEnabledFlag = mailLinkTrackingEnabledFlag;
    return this;
  }

   /**
   * Get mailLinkTrackingEnabledFlag
   * @return mailLinkTrackingEnabledFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAIL_LINK_TRACKING_ENABLED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MailLinkTrackingEnabledFlagEnum getMailLinkTrackingEnabledFlag() {
    return mailLinkTrackingEnabledFlag;
  }


  @JsonProperty(JSON_PROPERTY_MAIL_LINK_TRACKING_ENABLED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMailLinkTrackingEnabledFlag(MailLinkTrackingEnabledFlagEnum mailLinkTrackingEnabledFlag) {
    this.mailLinkTrackingEnabledFlag = mailLinkTrackingEnabledFlag;
  }


  public MailMessageItemForListAllOf readFlag(ReadFlagEnum readFlag) {
    
    this.readFlag = readFlag;
    return this;
  }

   /**
   * Get readFlag
   * @return readFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_READ_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReadFlagEnum getReadFlag() {
    return readFlag;
  }


  @JsonProperty(JSON_PROPERTY_READ_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadFlag(ReadFlagEnum readFlag) {
    this.readFlag = readFlag;
  }


  public MailMessageItemForListAllOf draft(String draft) {
    
    this.draft = draft;
    return this;
  }

   /**
   * If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise &#x60;null&#x60;.
   * @return draft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.")
  @JsonProperty(JSON_PROPERTY_DRAFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDraft() {
    return draft;
  }


  @JsonProperty(JSON_PROPERTY_DRAFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDraft(String draft) {
    this.draft = draft;
  }


  public MailMessageItemForListAllOf draftFlag(DraftFlagEnum draftFlag) {
    
    this.draftFlag = draftFlag;
    return this;
  }

   /**
   * Get draftFlag
   * @return draftFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DRAFT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DraftFlagEnum getDraftFlag() {
    return draftFlag;
  }


  @JsonProperty(JSON_PROPERTY_DRAFT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDraftFlag(DraftFlagEnum draftFlag) {
    this.draftFlag = draftFlag;
  }


  public MailMessageItemForListAllOf syncedFlag(SyncedFlagEnum syncedFlag) {
    
    this.syncedFlag = syncedFlag;
    return this;
  }

   /**
   * Get syncedFlag
   * @return syncedFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SYNCED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SyncedFlagEnum getSyncedFlag() {
    return syncedFlag;
  }


  @JsonProperty(JSON_PROPERTY_SYNCED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSyncedFlag(SyncedFlagEnum syncedFlag) {
    this.syncedFlag = syncedFlag;
  }


  public MailMessageItemForListAllOf deletedFlag(DeletedFlagEnum deletedFlag) {
    
    this.deletedFlag = deletedFlag;
    return this;
  }

   /**
   * Get deletedFlag
   * @return deletedFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DELETED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeletedFlagEnum getDeletedFlag() {
    return deletedFlag;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletedFlag(DeletedFlagEnum deletedFlag) {
    this.deletedFlag = deletedFlag;
  }


  public MailMessageItemForListAllOf hasBodyFlag(HasBodyFlagEnum hasBodyFlag) {
    
    this.hasBodyFlag = hasBodyFlag;
    return this;
  }

   /**
   * Get hasBodyFlag
   * @return hasBodyFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HAS_BODY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HasBodyFlagEnum getHasBodyFlag() {
    return hasBodyFlag;
  }


  @JsonProperty(JSON_PROPERTY_HAS_BODY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasBodyFlag(HasBodyFlagEnum hasBodyFlag) {
    this.hasBodyFlag = hasBodyFlag;
  }


  public MailMessageItemForListAllOf sentFlag(SentFlagEnum sentFlag) {
    
    this.sentFlag = sentFlag;
    return this;
  }

   /**
   * Get sentFlag
   * @return sentFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SENT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SentFlagEnum getSentFlag() {
    return sentFlag;
  }


  @JsonProperty(JSON_PROPERTY_SENT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentFlag(SentFlagEnum sentFlag) {
    this.sentFlag = sentFlag;
  }


  public MailMessageItemForListAllOf sentFromPipedriveFlag(SentFromPipedriveFlagEnum sentFromPipedriveFlag) {
    
    this.sentFromPipedriveFlag = sentFromPipedriveFlag;
    return this;
  }

   /**
   * Get sentFromPipedriveFlag
   * @return sentFromPipedriveFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SENT_FROM_PIPEDRIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SentFromPipedriveFlagEnum getSentFromPipedriveFlag() {
    return sentFromPipedriveFlag;
  }


  @JsonProperty(JSON_PROPERTY_SENT_FROM_PIPEDRIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentFromPipedriveFlag(SentFromPipedriveFlagEnum sentFromPipedriveFlag) {
    this.sentFromPipedriveFlag = sentFromPipedriveFlag;
  }


  public MailMessageItemForListAllOf smartBccFlag(SmartBccFlagEnum smartBccFlag) {
    
    this.smartBccFlag = smartBccFlag;
    return this;
  }

   /**
   * Get smartBccFlag
   * @return smartBccFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SMART_BCC_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SmartBccFlagEnum getSmartBccFlag() {
    return smartBccFlag;
  }


  @JsonProperty(JSON_PROPERTY_SMART_BCC_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmartBccFlag(SmartBccFlagEnum smartBccFlag) {
    this.smartBccFlag = smartBccFlag;
  }


  public MailMessageItemForListAllOf messageTime(OffsetDateTime messageTime) {
    
    this.messageTime = messageTime;
    return this;
  }

   /**
   * Creation or receival time of the mail message
   * @return messageTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creation or receival time of the mail message")
  @JsonProperty(JSON_PROPERTY_MESSAGE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getMessageTime() {
    return messageTime;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageTime(OffsetDateTime messageTime) {
    this.messageTime = messageTime;
  }


  public MailMessageItemForListAllOf addTime(OffsetDateTime addTime) {
    
    this.addTime = addTime;
    return this;
  }

   /**
   * The insertion into the database time of the mail message
   * @return addTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The insertion into the database time of the mail message")
  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getAddTime() {
    return addTime;
  }


  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddTime(OffsetDateTime addTime) {
    this.addTime = addTime;
  }


  public MailMessageItemForListAllOf updateTime(OffsetDateTime updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The updating time in the database of the mail message
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The updating time in the database of the mail message")
  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public MailMessageItemForListAllOf hasAttachmentsFlag(HasAttachmentsFlagEnum hasAttachmentsFlag) {
    
    this.hasAttachmentsFlag = hasAttachmentsFlag;
    return this;
  }

   /**
   * Get hasAttachmentsFlag
   * @return hasAttachmentsFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HAS_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HasAttachmentsFlagEnum getHasAttachmentsFlag() {
    return hasAttachmentsFlag;
  }


  @JsonProperty(JSON_PROPERTY_HAS_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasAttachmentsFlag(HasAttachmentsFlagEnum hasAttachmentsFlag) {
    this.hasAttachmentsFlag = hasAttachmentsFlag;
  }


  public MailMessageItemForListAllOf hasInlineAttachmentsFlag(HasInlineAttachmentsFlagEnum hasInlineAttachmentsFlag) {
    
    this.hasInlineAttachmentsFlag = hasInlineAttachmentsFlag;
    return this;
  }

   /**
   * Get hasInlineAttachmentsFlag
   * @return hasInlineAttachmentsFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HAS_INLINE_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HasInlineAttachmentsFlagEnum getHasInlineAttachmentsFlag() {
    return hasInlineAttachmentsFlag;
  }


  @JsonProperty(JSON_PROPERTY_HAS_INLINE_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasInlineAttachmentsFlag(HasInlineAttachmentsFlagEnum hasInlineAttachmentsFlag) {
    this.hasInlineAttachmentsFlag = hasInlineAttachmentsFlag;
  }


  public MailMessageItemForListAllOf hasRealAttachmentsFlag(HasRealAttachmentsFlagEnum hasRealAttachmentsFlag) {
    
    this.hasRealAttachmentsFlag = hasRealAttachmentsFlag;
    return this;
  }

   /**
   * Get hasRealAttachmentsFlag
   * @return hasRealAttachmentsFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HAS_REAL_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HasRealAttachmentsFlagEnum getHasRealAttachmentsFlag() {
    return hasRealAttachmentsFlag;
  }


  @JsonProperty(JSON_PROPERTY_HAS_REAL_ATTACHMENTS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasRealAttachmentsFlag(HasRealAttachmentsFlagEnum hasRealAttachmentsFlag) {
    this.hasRealAttachmentsFlag = hasRealAttachmentsFlag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailMessageItemForListAllOf mailMessageItemForListAllOf = (MailMessageItemForListAllOf) o;
    return Objects.equals(this.id, mailMessageItemForListAllOf.id) &&
        Objects.equals(this.from, mailMessageItemForListAllOf.from) &&
        Objects.equals(this.to, mailMessageItemForListAllOf.to) &&
        Objects.equals(this.cc, mailMessageItemForListAllOf.cc) &&
        Objects.equals(this.bcc, mailMessageItemForListAllOf.bcc) &&
        Objects.equals(this.bodyUrl, mailMessageItemForListAllOf.bodyUrl) &&
        Objects.equals(this.accountId, mailMessageItemForListAllOf.accountId) &&
        Objects.equals(this.userId, mailMessageItemForListAllOf.userId) &&
        Objects.equals(this.mailThreadId, mailMessageItemForListAllOf.mailThreadId) &&
        Objects.equals(this.subject, mailMessageItemForListAllOf.subject) &&
        Objects.equals(this.snippet, mailMessageItemForListAllOf.snippet) &&
        equalsNullable(this.mailTrackingStatus, mailMessageItemForListAllOf.mailTrackingStatus) &&
        Objects.equals(this.mailLinkTrackingEnabledFlag, mailMessageItemForListAllOf.mailLinkTrackingEnabledFlag) &&
        Objects.equals(this.readFlag, mailMessageItemForListAllOf.readFlag) &&
        Objects.equals(this.draft, mailMessageItemForListAllOf.draft) &&
        Objects.equals(this.draftFlag, mailMessageItemForListAllOf.draftFlag) &&
        Objects.equals(this.syncedFlag, mailMessageItemForListAllOf.syncedFlag) &&
        Objects.equals(this.deletedFlag, mailMessageItemForListAllOf.deletedFlag) &&
        Objects.equals(this.hasBodyFlag, mailMessageItemForListAllOf.hasBodyFlag) &&
        Objects.equals(this.sentFlag, mailMessageItemForListAllOf.sentFlag) &&
        Objects.equals(this.sentFromPipedriveFlag, mailMessageItemForListAllOf.sentFromPipedriveFlag) &&
        Objects.equals(this.smartBccFlag, mailMessageItemForListAllOf.smartBccFlag) &&
        Objects.equals(this.messageTime, mailMessageItemForListAllOf.messageTime) &&
        Objects.equals(this.addTime, mailMessageItemForListAllOf.addTime) &&
        Objects.equals(this.updateTime, mailMessageItemForListAllOf.updateTime) &&
        Objects.equals(this.hasAttachmentsFlag, mailMessageItemForListAllOf.hasAttachmentsFlag) &&
        Objects.equals(this.hasInlineAttachmentsFlag, mailMessageItemForListAllOf.hasInlineAttachmentsFlag) &&
        Objects.equals(this.hasRealAttachmentsFlag, mailMessageItemForListAllOf.hasRealAttachmentsFlag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, from, to, cc, bcc, bodyUrl, accountId, userId, mailThreadId, subject, snippet, hashCodeNullable(mailTrackingStatus), mailLinkTrackingEnabledFlag, readFlag, draft, draftFlag, syncedFlag, deletedFlag, hasBodyFlag, sentFlag, sentFromPipedriveFlag, smartBccFlag, messageTime, addTime, updateTime, hasAttachmentsFlag, hasInlineAttachmentsFlag, hasRealAttachmentsFlag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailMessageItemForListAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    bodyUrl: ").append(toIndentedString(bodyUrl)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    mailThreadId: ").append(toIndentedString(mailThreadId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    mailTrackingStatus: ").append(toIndentedString(mailTrackingStatus)).append("\n");
    sb.append("    mailLinkTrackingEnabledFlag: ").append(toIndentedString(mailLinkTrackingEnabledFlag)).append("\n");
    sb.append("    readFlag: ").append(toIndentedString(readFlag)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    draftFlag: ").append(toIndentedString(draftFlag)).append("\n");
    sb.append("    syncedFlag: ").append(toIndentedString(syncedFlag)).append("\n");
    sb.append("    deletedFlag: ").append(toIndentedString(deletedFlag)).append("\n");
    sb.append("    hasBodyFlag: ").append(toIndentedString(hasBodyFlag)).append("\n");
    sb.append("    sentFlag: ").append(toIndentedString(sentFlag)).append("\n");
    sb.append("    sentFromPipedriveFlag: ").append(toIndentedString(sentFromPipedriveFlag)).append("\n");
    sb.append("    smartBccFlag: ").append(toIndentedString(smartBccFlag)).append("\n");
    sb.append("    messageTime: ").append(toIndentedString(messageTime)).append("\n");
    sb.append("    addTime: ").append(toIndentedString(addTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    hasAttachmentsFlag: ").append(toIndentedString(hasAttachmentsFlag)).append("\n");
    sb.append("    hasInlineAttachmentsFlag: ").append(toIndentedString(hasInlineAttachmentsFlag)).append("\n");
    sb.append("    hasRealAttachmentsFlag: ").append(toIndentedString(hasRealAttachmentsFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

