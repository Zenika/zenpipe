/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ListProductsResponse200AllOfDataItemsInnerProduct
 */
@JsonPropertyOrder({
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_ID,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_NAME,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_CODE,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_UNIT,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_TAX,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_ACTIVE_FLAG,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_SELECTABLE,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_VISIBLE_TO,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_OWNER_ID,
  ListProductsResponse200AllOfDataItemsInnerProduct.JSON_PROPERTY_PRICES
})
@JsonTypeName("listProductsResponse200_allOf_data_items_inner_product")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class ListProductsResponse200AllOfDataItemsInnerProduct {
  public static final String JSON_PROPERTY_ID = "id";
  private BigDecimal id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_UNIT = "unit";
  private String unit;

  public static final String JSON_PROPERTY_TAX = "tax";
  private BigDecimal tax = new BigDecimal("0");

  /**
   * Whether this product is active or not
   */
  public enum ActiveFlagEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    ActiveFlagEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActiveFlagEnum fromValue(BigDecimal value) {
      for (ActiveFlagEnum b : ActiveFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTIVE_FLAG = "active_flag";
  private ActiveFlagEnum activeFlag = ActiveFlagEnum.NUMBER_1;

  /**
   * Whether this product is selected in deals or not
   */
  public enum SelectableEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    SelectableEnum(BigDecimal value) {
      this.value = value;
    }

    @JsonValue
    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelectableEnum fromValue(BigDecimal value) {
      for (SelectableEnum b : SelectableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SELECTABLE = "selectable";
  private SelectableEnum selectable = SelectableEnum.NUMBER_1;

  /**
   * Gets or Sets visibleTo
   */
  public enum VisibleToEnum {
    _1("1"),
    
    _3("3"),
    
    _5("5"),
    
    _7("7");

    private String value;

    VisibleToEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibleToEnum fromValue(String value) {
      for (VisibleToEnum b : VisibleToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBLE_TO = "visible_to";
  private VisibleToEnum visibleTo;

  public static final String JSON_PROPERTY_OWNER_ID = "owner_id";
  private Object ownerId;

  public static final String JSON_PROPERTY_PRICES = "prices";
  private Object prices;

  public ListProductsResponse200AllOfDataItemsInnerProduct() {
  }

  public ListProductsResponse200AllOfDataItemsInnerProduct id(BigDecimal id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the product
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the product")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(BigDecimal id) {
    this.id = id;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the product
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the product")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The product code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The product code")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * The unit in which this product is sold
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit in which this product is sold")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnit(String unit) {
    this.unit = unit;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct tax(BigDecimal tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * The ax percentage
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ax percentage")
  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTax() {
    return tax;
  }


  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTax(BigDecimal tax) {
    this.tax = tax;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct activeFlag(ActiveFlagEnum activeFlag) {
    
    this.activeFlag = activeFlag;
    return this;
  }

   /**
   * Whether this product is active or not
   * @return activeFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this product is active or not")
  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActiveFlagEnum getActiveFlag() {
    return activeFlag;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveFlag(ActiveFlagEnum activeFlag) {
    this.activeFlag = activeFlag;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct selectable(SelectableEnum selectable) {
    
    this.selectable = selectable;
    return this;
  }

   /**
   * Whether this product is selected in deals or not
   * @return selectable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this product is selected in deals or not")
  @JsonProperty(JSON_PROPERTY_SELECTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SelectableEnum getSelectable() {
    return selectable;
  }


  @JsonProperty(JSON_PROPERTY_SELECTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectable(SelectableEnum selectable) {
    this.selectable = selectable;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct visibleTo(VisibleToEnum visibleTo) {
    
    this.visibleTo = visibleTo;
    return this;
  }

   /**
   * Get visibleTo
   * @return visibleTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibleToEnum getVisibleTo() {
    return visibleTo;
  }


  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibleTo(VisibleToEnum visibleTo) {
    this.visibleTo = visibleTo;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct ownerId(Object ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Information about the Pipedrive user who owns the product
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the Pipedrive user who owns the product")
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getOwnerId() {
    return ownerId;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerId(Object ownerId) {
    this.ownerId = ownerId;
  }


  public ListProductsResponse200AllOfDataItemsInnerProduct prices(Object prices) {
    
    this.prices = prices;
    return this;
  }

   /**
   * Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)
   * @return prices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)")
  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getPrices() {
    return prices;
  }


  @JsonProperty(JSON_PROPERTY_PRICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrices(Object prices) {
    this.prices = prices;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListProductsResponse200AllOfDataItemsInnerProduct listProductsResponse200AllOfDataItemsInnerProduct = (ListProductsResponse200AllOfDataItemsInnerProduct) o;
    return Objects.equals(this.id, listProductsResponse200AllOfDataItemsInnerProduct.id) &&
        Objects.equals(this.name, listProductsResponse200AllOfDataItemsInnerProduct.name) &&
        Objects.equals(this.code, listProductsResponse200AllOfDataItemsInnerProduct.code) &&
        Objects.equals(this.unit, listProductsResponse200AllOfDataItemsInnerProduct.unit) &&
        Objects.equals(this.tax, listProductsResponse200AllOfDataItemsInnerProduct.tax) &&
        Objects.equals(this.activeFlag, listProductsResponse200AllOfDataItemsInnerProduct.activeFlag) &&
        Objects.equals(this.selectable, listProductsResponse200AllOfDataItemsInnerProduct.selectable) &&
        Objects.equals(this.visibleTo, listProductsResponse200AllOfDataItemsInnerProduct.visibleTo) &&
        Objects.equals(this.ownerId, listProductsResponse200AllOfDataItemsInnerProduct.ownerId) &&
        Objects.equals(this.prices, listProductsResponse200AllOfDataItemsInnerProduct.prices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, code, unit, tax, activeFlag, selectable, visibleTo, ownerId, prices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListProductsResponse200AllOfDataItemsInnerProduct {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
    sb.append("    selectable: ").append(toIndentedString(selectable)).append("\n");
    sb.append("    visibleTo: ").append(toIndentedString(visibleTo)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

