/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zenika.pipedrive.model.BaseMailThreadAllOf1PartiesToInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Parties of the mail thread
 */
@ApiModel(description = "Parties of the mail thread")
@JsonPropertyOrder({
  BaseMailThreadAllOf1Parties.JSON_PROPERTY_TO,
  BaseMailThreadAllOf1Parties.JSON_PROPERTY_FROM
})
@JsonTypeName("baseMailThread_allOf_1_parties")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class BaseMailThreadAllOf1Parties {
  public static final String JSON_PROPERTY_TO = "to";
  private List<BaseMailThreadAllOf1PartiesToInner> to = null;

  public static final String JSON_PROPERTY_FROM = "from";
  private List<BaseMailThreadAllOf1PartiesToInner> from = null;

  public BaseMailThreadAllOf1Parties() {
  }

  public BaseMailThreadAllOf1Parties to(List<BaseMailThreadAllOf1PartiesToInner> to) {
    
    this.to = to;
    return this;
  }

  public BaseMailThreadAllOf1Parties addToItem(BaseMailThreadAllOf1PartiesToInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * Recipients of the mail thread
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Recipients of the mail thread")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BaseMailThreadAllOf1PartiesToInner> getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(List<BaseMailThreadAllOf1PartiesToInner> to) {
    this.to = to;
  }


  public BaseMailThreadAllOf1Parties from(List<BaseMailThreadAllOf1PartiesToInner> from) {
    
    this.from = from;
    return this;
  }

  public BaseMailThreadAllOf1Parties addFromItem(BaseMailThreadAllOf1PartiesToInner fromItem) {
    if (this.from == null) {
      this.from = new ArrayList<>();
    }
    this.from.add(fromItem);
    return this;
  }

   /**
   * Senders of the mail thread
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Senders of the mail thread")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BaseMailThreadAllOf1PartiesToInner> getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(List<BaseMailThreadAllOf1PartiesToInner> from) {
    this.from = from;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseMailThreadAllOf1Parties baseMailThreadAllOf1Parties = (BaseMailThreadAllOf1Parties) o;
    return Objects.equals(this.to, baseMailThreadAllOf1Parties.to) &&
        Objects.equals(this.from, baseMailThreadAllOf1Parties.from);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, from);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseMailThreadAllOf1Parties {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

