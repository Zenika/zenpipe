/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostFilterResponse200AllOfData
 */
@JsonPropertyOrder({
  PostFilterResponse200AllOfData.JSON_PROPERTY_ID,
  PostFilterResponse200AllOfData.JSON_PROPERTY_NAME,
  PostFilterResponse200AllOfData.JSON_PROPERTY_ACTIVE_FLAG,
  PostFilterResponse200AllOfData.JSON_PROPERTY_TYPE,
  PostFilterResponse200AllOfData.JSON_PROPERTY_TEMPORARY_FLAG,
  PostFilterResponse200AllOfData.JSON_PROPERTY_USER_ID,
  PostFilterResponse200AllOfData.JSON_PROPERTY_ADD_TIME,
  PostFilterResponse200AllOfData.JSON_PROPERTY_UPDATE_TIME,
  PostFilterResponse200AllOfData.JSON_PROPERTY_VISIBLE_TO,
  PostFilterResponse200AllOfData.JSON_PROPERTY_CUSTOM_VIEW_ID,
  PostFilterResponse200AllOfData.JSON_PROPERTY_CONDITIONS
})
@JsonTypeName("postFilterResponse200_allOf_data")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class PostFilterResponse200AllOfData {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ACTIVE_FLAG = "active_flag";
  private Boolean activeFlag;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    DEALS("deals"),
    
    LEADS("leads"),
    
    ORG("org"),
    
    PEOPLE("people"),
    
    PRODUCTS("products"),
    
    ACTIVITY("activity");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_TEMPORARY_FLAG = "temporary_flag";
  private Boolean temporaryFlag;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Integer userId;

  public static final String JSON_PROPERTY_ADD_TIME = "add_time";
  private String addTime;

  public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
  private String updateTime;

  public static final String JSON_PROPERTY_VISIBLE_TO = "visible_to";
  private Integer visibleTo;

  public static final String JSON_PROPERTY_CUSTOM_VIEW_ID = "custom_view_id";
  private Integer customViewId;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private Object conditions;

  public PostFilterResponse200AllOfData() {
  }

  public PostFilterResponse200AllOfData id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the created filter
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the created filter")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PostFilterResponse200AllOfData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the created filter
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the created filter")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public PostFilterResponse200AllOfData activeFlag(Boolean activeFlag) {
    
    this.activeFlag = activeFlag;
    return this;
  }

   /**
   * The activity flag of the created filter
   * @return activeFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The activity flag of the created filter")
  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActiveFlag() {
    return activeFlag;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveFlag(Boolean activeFlag) {
    this.activeFlag = activeFlag;
  }


  public PostFilterResponse200AllOfData type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PostFilterResponse200AllOfData temporaryFlag(Boolean temporaryFlag) {
    
    this.temporaryFlag = temporaryFlag;
    return this;
  }

   /**
   * If the created filter is temporary or not
   * @return temporaryFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the created filter is temporary or not")
  @JsonProperty(JSON_PROPERTY_TEMPORARY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTemporaryFlag() {
    return temporaryFlag;
  }


  @JsonProperty(JSON_PROPERTY_TEMPORARY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemporaryFlag(Boolean temporaryFlag) {
    this.temporaryFlag = temporaryFlag;
  }


  public PostFilterResponse200AllOfData userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The user ID of the created filter
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user ID of the created filter")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public PostFilterResponse200AllOfData addTime(String addTime) {
    
    this.addTime = addTime;
    return this;
  }

   /**
   * The add time of the created filter
   * @return addTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The add time of the created filter")
  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddTime() {
    return addTime;
  }


  @JsonProperty(JSON_PROPERTY_ADD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddTime(String addTime) {
    this.addTime = addTime;
  }


  public PostFilterResponse200AllOfData updateTime(String updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The update time of the created filter
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The update time of the created filter")
  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdateTime() {
    return updateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public PostFilterResponse200AllOfData visibleTo(Integer visibleTo) {
    
    this.visibleTo = visibleTo;
    return this;
  }

   /**
   * The visibility group ID of the created filter
   * @return visibleTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The visibility group ID of the created filter")
  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVisibleTo() {
    return visibleTo;
  }


  @JsonProperty(JSON_PROPERTY_VISIBLE_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibleTo(Integer visibleTo) {
    this.visibleTo = visibleTo;
  }


  public PostFilterResponse200AllOfData customViewId(Integer customViewId) {
    
    this.customViewId = customViewId;
    return this;
  }

   /**
   * The custom view ID of the created filter
   * @return customViewId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The custom view ID of the created filter")
  @JsonProperty(JSON_PROPERTY_CUSTOM_VIEW_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCustomViewId() {
    return customViewId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_VIEW_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomViewId(Integer customViewId) {
    this.customViewId = customViewId;
  }


  public PostFilterResponse200AllOfData conditions(Object conditions) {
    
    this.conditions = conditions;
    return this;
  }

   /**
   * The created filter conditions object
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The created filter conditions object")
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(Object conditions) {
    this.conditions = conditions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostFilterResponse200AllOfData postFilterResponse200AllOfData = (PostFilterResponse200AllOfData) o;
    return Objects.equals(this.id, postFilterResponse200AllOfData.id) &&
        Objects.equals(this.name, postFilterResponse200AllOfData.name) &&
        Objects.equals(this.activeFlag, postFilterResponse200AllOfData.activeFlag) &&
        Objects.equals(this.type, postFilterResponse200AllOfData.type) &&
        Objects.equals(this.temporaryFlag, postFilterResponse200AllOfData.temporaryFlag) &&
        Objects.equals(this.userId, postFilterResponse200AllOfData.userId) &&
        Objects.equals(this.addTime, postFilterResponse200AllOfData.addTime) &&
        Objects.equals(this.updateTime, postFilterResponse200AllOfData.updateTime) &&
        Objects.equals(this.visibleTo, postFilterResponse200AllOfData.visibleTo) &&
        Objects.equals(this.customViewId, postFilterResponse200AllOfData.customViewId) &&
        Objects.equals(this.conditions, postFilterResponse200AllOfData.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, activeFlag, type, temporaryFlag, userId, addTime, updateTime, visibleTo, customViewId, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostFilterResponse200AllOfData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    temporaryFlag: ").append(toIndentedString(temporaryFlag)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    addTime: ").append(toIndentedString(addTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    visibleTo: ").append(toIndentedString(visibleTo)).append("\n");
    sb.append("    customViewId: ").append(toIndentedString(customViewId)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

