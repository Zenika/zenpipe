/*
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zenika.pipedrive.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AddActivityTypeRequest
 */
@JsonPropertyOrder({
  AddActivityTypeRequest.JSON_PROPERTY_NAME,
  AddActivityTypeRequest.JSON_PROPERTY_ICON_KEY,
  AddActivityTypeRequest.JSON_PROPERTY_COLOR
})
@JsonTypeName("addActivityTypeRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T19:04:25.918485+01:00[Europe/Paris]")
public class AddActivityTypeRequest {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Icon graphic to use for representing this activity type
   */
  public enum IconKeyEnum {
    TASK("task"),
    
    EMAIL("email"),
    
    MEETING("meeting"),
    
    DEADLINE("deadline"),
    
    CALL("call"),
    
    LUNCH("lunch"),
    
    CALENDAR("calendar"),
    
    DOWNARROW("downarrow"),
    
    DOCUMENT("document"),
    
    SMARTPHONE("smartphone"),
    
    CAMERA("camera"),
    
    SCISSORS("scissors"),
    
    COGS("cogs"),
    
    BUBBLE("bubble"),
    
    UPARROW("uparrow"),
    
    CHECKBOX("checkbox"),
    
    SIGNPOST("signpost"),
    
    SHUFFLE("shuffle"),
    
    ADDRESSBOOK("addressbook"),
    
    LINEGRAPH("linegraph"),
    
    PICTURE("picture"),
    
    CAR("car"),
    
    WORLD("world"),
    
    SEARCH("search"),
    
    CLIP("clip"),
    
    SOUND("sound"),
    
    BRUSH("brush"),
    
    KEY("key"),
    
    PADLOCK("padlock"),
    
    PRICETAG("pricetag"),
    
    SUITCASE("suitcase"),
    
    FINISH("finish"),
    
    PLANE("plane"),
    
    LOOP("loop"),
    
    WIFI("wifi"),
    
    TRUCK("truck"),
    
    CART("cart"),
    
    BULB("bulb"),
    
    BELL("bell"),
    
    PRESENTATION("presentation");

    private String value;

    IconKeyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IconKeyEnum fromValue(String value) {
      for (IconKeyEnum b : IconKeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ICON_KEY = "icon_key";
  private IconKeyEnum iconKey;

  public static final String JSON_PROPERTY_COLOR = "color";
  private String color;

  public AddActivityTypeRequest() {
  }

  public AddActivityTypeRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the activity type
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "call", required = true, value = "The name of the activity type")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public AddActivityTypeRequest iconKey(IconKeyEnum iconKey) {
    
    this.iconKey = iconKey;
    return this;
  }

   /**
   * Icon graphic to use for representing this activity type
   * @return iconKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Icon graphic to use for representing this activity type")
  @JsonProperty(JSON_PROPERTY_ICON_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IconKeyEnum getIconKey() {
    return iconKey;
  }


  @JsonProperty(JSON_PROPERTY_ICON_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIconKey(IconKeyEnum iconKey) {
    this.iconKey = iconKey;
  }


  public AddActivityTypeRequest color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * A designated color for the activity type in 6-character HEX format (e.g. &#x60;FFFFFF&#x60; for white, &#x60;000000&#x60; for black)
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FFFFFF", value = "A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)")
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddActivityTypeRequest addActivityTypeRequest = (AddActivityTypeRequest) o;
    return Objects.equals(this.name, addActivityTypeRequest.name) &&
        Objects.equals(this.iconKey, addActivityTypeRequest.iconKey) &&
        Objects.equals(this.color, addActivityTypeRequest.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, iconKey, color);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddActivityTypeRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    iconKey: ").append(toIndentedString(iconKey)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

